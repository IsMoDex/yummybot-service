import { Context, InlineKeyboard } from 'grammy';
import { getUserFavoriteRecipes } from '../database/queries/recipe';

export async function favoritesCommand(ctx: Context) {
    const telegramId = ctx.from?.id;
    const lang = ctx.from?.language_code || 'ru';

    if (!telegramId) {
        return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }

    const favs = await getUserFavoriteRecipes(telegramId, lang);

    if (favs.length === 0) {
        return ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /recipes, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö.');
    }

    for (let i = 0; i < favs.length; i++) {
        const r = favs[i];
        const ingredients = r.ingredients.map(i => `${i.emoji} ${i.name}`).join(', ');
        const text = `*${i + 1}. ${r.title}*\n` +
            `–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: ${ingredients}`;

        const kb = new InlineKeyboard()
            .text('üìù –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç', `show_${r.id}`)
            .row()
            .text('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ', `delete_${r.id}`);

        await ctx.reply(text, {
            parse_mode: 'Markdown',
            reply_markup: kb,
        });
    }
}
