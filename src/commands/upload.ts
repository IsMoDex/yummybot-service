import { Context } from 'grammy';
import axios, { AxiosError } from 'axios';
import { recognizeProducts } from '../services/imageService';
import { addProductToUser } from '../database/queries/product';
import { saveImageUpload } from '../database/queries/image';

export async function uploadCommand(ctx: Context) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—à–ª–æ —Ñ–æ—Ç–æ
    const photo = ctx.message?.photo;
    if (!photo) {
        return ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /upload, –∞ –∑–∞—Ç–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.');
    }

    const fileId = photo[photo.length - 1].file_id;
    const token  = process.env.BOT_TOKEN!;
    let link: string;

    try {
        const file = await ctx.api.getFile(fileId);
        link = `https://api.telegram.org/file/bot${token}/${file.file_path}`;
    } catch (err) {
        console.error('Telegram.getFile error:', err);
        return ctx.reply('üö® –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏–∑ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.');
    }

    let buffer: Buffer;
    try {
        const resp = await axios.get<ArrayBuffer>(link, {
            responseType: 'arraybuffer',
            timeout: 120_000,
        });
        buffer = Buffer.from(resp.data);
    } catch (err) {
        console.error('Download error:', err);
        const e = err as AxiosError;
        if (e.code === 'ETIMEDOUT' || e.code === 'ECONNABORTED') {
            return ctx.reply('üö® –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.');
        }
        return ctx.reply('üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }

    await saveImageUpload(ctx.from!.id, link);

    let results: { class: string; confidence: number }[];
    try {
        results = await recognizeProducts(buffer);
    } catch (err) {
        console.error('Recognition error:', err);
        return ctx.reply('üö® –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.');
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ—Ä–æ–≥—É —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ ‚â• 0.5
    const filtered = results.filter(r => r.confidence >= 0.5);
    if (!filtered.length) {
        return ctx.reply('‚Ñπ –ù–∞ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (‚â• 50%).');
    }

    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ machine‚ÄëID
    const classes = Array.from(new Set(filtered.map(r => r.class.toLowerCase())));

    const added:    string[] = [];
    const already:  string[] = [];
    const notFound: string[] = [];

    for (const cls of classes) {
        const res = await addProductToUser(ctx.from!.id, cls);
        if (res.success)                added.push(cls);
        else if (res.reason === 'already_exists') already.push(cls);
        else if (res.reason === 'not_found')      notFound.push(cls);
    }

    let reply = `üîç –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ (${filtered.length} –æ–±—ä–µ–∫—Ç–æ–≤ ‚â• 50%):\n` +
        classes.map(c => `‚Ä¢ \`${c}\``).join('\n') +
        `\n\n`;

    if (added.length)    reply += `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${added.map(c => `\`${c}\``).join(', ')}\n`;
    if (already.length)  reply += `‚Ñπ –£–∂–µ –≤ —Å–ø–∏—Å–∫–µ: ${already.map(c => `\`${c}\``).join(', ')}\n`;
    if (notFound.length) reply += `‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ: ${notFound.map(c => `\`${c}\``).join(', ')}\n`;

    return ctx.reply(reply, { parse_mode: 'Markdown' });
}
