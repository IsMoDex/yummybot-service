import { Context, InlineKeyboard } from 'grammy';
import axios, { AxiosError } from 'axios';
import { recognizeProducts } from '../services/imageService';
import { saveImageUpload } from '../database/queries/image';
import prisma from '../database/client';
import { recognizedCache, CACHE_TTL } from '../cache/recognizedCache';

export async function uploadCommand(ctx: Context) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ /upload
    const photo = ctx.message?.photo;
    if (!photo) {
        return ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /upload, –∞ –∑–∞—Ç–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.');
    }

    const fileId = photo[photo.length - 1].file_id;
    const token  = process.env.BOT_TOKEN!;
    let link: string;

    // 1) –ü–æ–ª—É—á–∞–µ–º file_path —É Telegram
    try {
        const file = await ctx.api.getFile(fileId);
        link = `https://api.telegram.org/file/bot${token}/${file.file_path}`;
    } catch (err) {
        console.error('Telegram.getFile error:', err);
        return ctx.reply('üö® –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏–∑ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    // 2) –°–∫–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É (—Ç–∞–π–º–∞—É—Ç 2 –º–∏–Ω—É—Ç—ã)
    let buffer: Buffer;
    try {
        const resp = await axios.get<ArrayBuffer>(link, {
            responseType: 'arraybuffer',
            timeout: 120_000,
        });
        buffer = Buffer.from(resp.data);
    } catch (err) {
        console.error('Download error:', err);
        const e = err as AxiosError;
        if (e.code === 'ETIMEDOUT' || e.code === 'ECONNABORTED') {
            return ctx.reply('üö® –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        return ctx.reply('üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }

    // 3) –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç –∑–∞–≥—Ä—É–∑–∫–∏
    await saveImageUpload(ctx.from!.id, link);

    // 4) –†–∞—Å–ø–æ–∑–Ω–∞—ë–º –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    let results: { class: string; confidence: number }[];
    try {
        results = await recognizeProducts(buffer);
    } catch (err) {
        console.error('Recognition error:', err);
        return ctx.reply('üö® –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    // 5) –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ ‚â• 40%
    const filtered = results
        .filter(r => r.confidence >= 0.5)
        .map(r => r.class.toLowerCase());
    if (filtered.length === 0) {
        return ctx.reply('‚Ñπ –ù–∞ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é ‚â• 50%.');
    }

    // 6) –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –µ—Å—Ç—å –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ
    const uniqueIds = Array.from(new Set(filtered));
    const catalog = await prisma.product.findMany({
        where: { id: { in: uniqueIds } },
        select: { id: true },
    }).then(rows => rows.map(r => r.id));
    if (catalog.length === 0) {
        return ctx.reply('‚ö† –ù–∏ –æ–¥–∏–Ω –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ.');
    }

    // 7) –°—Ç—Ä–æ–∏–º —Ç–µ–∫—Å—Ç –∏ inline-–∫–Ω–æ–ø–∫–∏
    const text = `üîç –ù–∞–π–¥–µ–Ω–æ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ (${catalog.length}):\n` +
        catalog.map(id => `‚Ä¢ \`${id}\``).join('\n');

    const kb = new InlineKeyboard()
        .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ', 'apply_add')
        .row()
        .text('üîÑ –ó–∞–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫', 'apply_replace');

    // 8) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –ø–æ message_id
    const sent = await ctx.reply(text, {
        parse_mode: 'Markdown',
        reply_markup: kb,
    });

    recognizedCache.set(sent.message_id, {
        ts: Date.now(),
        list: catalog,
    });

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    for (const [msgId, entry] of recognizedCache) {
        if (Date.now() - entry.ts > CACHE_TTL) {
            recognizedCache.delete(msgId);
        }
    }
}