import { Context } from 'grammy';
import {
    getRecipeById,
    saveFavoriteRecipe,
    removeFavoriteRecipe
} from '../database/queries/recipe';

export async function showRecipeAction(ctx: Context) {
    // –ü—Ä–∏–º–µ—Ä callback data: "show_42"
    const data = ctx.callbackQuery?.data;
    if (!data) return;
    const [, idStr] = data.split('_');
    const recipeId = Number(idStr);
    if (isNaN(recipeId)) return;

    const lang = ctx.from?.language_code || 'ru';
    const recipe = await getRecipeById(recipeId, lang);
    if (!recipe) {
        await ctx.answerCallbackQuery({ text: '–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert: true });
        return;
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞
    const ingredientsList = recipe.ingredients
        .map(i => `${i.emoji} ${i.name}`)
        .join('\n');

    const text = `*${recipe.title}*\n\n` +
        (recipe.description ? `${recipe.description}\n\n` : '') +
        `*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n${ingredientsList}\n\n` +
        `*–®–∞–≥–∏:*\n${recipe.steps}`;

    // –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await ctx.reply(text, { parse_mode: 'Markdown' });
    await ctx.answerCallbackQuery(); // –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º "—á–∞—Å–∏–∫–∏"
}

export async function saveRecipeAction(ctx: Context) {
    // –ü—Ä–∏–º–µ—Ä callback data: "save_42"
    const data = ctx.callbackQuery?.data;
    if (!data) return;
    const [, idStr] = data.split('_');
    const recipeId = Number(idStr);
    if (isNaN(recipeId)) return;

    const telegramId = ctx.from?.id;
    if (!telegramId) return;

    const result = await saveFavoriteRecipe(telegramId, recipeId);
    if (result.success) {
        await ctx.answerCallbackQuery({ text: '–†–µ—Ü–µ–ø—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ üëç', show_alert: false });
    } else if (result.reason === 'already_exists') {
        await ctx.answerCallbackQuery({ text: '–£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º', show_alert: false });
    } else {
        await ctx.answerCallbackQuery({ text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏', show_alert: true });
    }
}

/**
 * callback data: "delete_42"
 */
export async function deleteRecipeAction(ctx: Context) {
    const data = ctx.callbackQuery?.data;
    if (!data) return;
    const [, idStr] = data.split('_');
    const recipeId = Number(idStr);
    if (isNaN(recipeId)) return;

    const telegramId = ctx.from?.id;
    if (!telegramId) return;

    const result = await removeFavoriteRecipe(telegramId, recipeId);
    if (result.success) {
        // —É–¥–∞–ª—è–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ‚Äë–∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ —á–∞—Ç–∞
        await ctx.deleteMessage();
        await ctx.answerCallbackQuery({ text: '–†–µ—Ü–µ–ø—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ', show_alert: false });
    } else {
        await ctx.answerCallbackQuery({ text: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç', show_alert: true });
    }
}