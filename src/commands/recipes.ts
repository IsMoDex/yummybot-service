import { Context, InlineKeyboard } from 'grammy';
import { getRecipeRecommendations } from '../database/queries/recipe';

export async function recipesCommand(ctx: Context) {
    const telegramId = ctx.from?.id;
    if (!telegramId) {
        return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }

    const recs = await getRecipeRecommendations(telegramId, 5);

    if (recs.length === 0) {
        return ctx.reply('–ù–µ –Ω–∞—à–ª–æ—Å—å —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –ø—Ä–æ–¥—É–∫—Ç–∞–º. –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.');
    }

    for (let i = 0; i < recs.length; i++) {
        const r = recs[i];
        const text = `*${i + 1}. ${r.title}*\n` +
            `–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: ${r.matchedCount}/${r.totalIngredients} —Å–æ–≤–ø–∞–ª–æ` +
            (r.favProductMatches > 0
                ? ` (–≤ —Ç–æ–º —á–∏—Å–ª–µ ${r.favProductMatches} –∏–∑ –≤–∞—à–∏—Ö ‚ô•Ô∏è)`
                : '') +
            (r.description ? `\n${r.description}` : '');

        const kb = new InlineKeyboard()
            .text('üìù –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç', `show_${r.id}`)
            .row()
            .text('‚ù§Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç', `save_${r.id}`);

        await ctx.reply(text, {
            parse_mode: 'Markdown',
            reply_markup: kb,
        });
    }
}
