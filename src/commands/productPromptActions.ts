import { MyContext } from '../types'
import { findUser, createUser } from '../database/queries/user'
import {
    addProductToUser,
    removeProductFromUser,
    getUserProductIds,
    getUserProducts,
} from '../database/queries/product'
import {
    findExactTranslations,
    searchTranslations,
    getTranslationById,
} from '../database/queries/productTranslation'
import { InlineKeyboard, GrammyError } from 'grammy'
import { PRODUCT_PAGE_SIZE } from '../config'

/**
 * –í—Ö–æ–¥ –≤ prompt‚Äë—Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
 */
export async function promptAddAction(ctx: MyContext) {
    await ctx.answerCallbackQuery()
    ctx.session.action = 'add'
    ctx.session.page = 0
    delete ctx.session.lastResults
    return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:')
}

/**
 * –í—Ö–æ–¥ –≤ prompt‚Äë—Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è
 */
export async function promptRemoveAction(ctx: MyContext) {
    await ctx.answerCallbackQuery()
    ctx.session.action = 'remove'
    ctx.session.page = 0
    delete ctx.session.lastResults
    return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:')
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ prompt‚Äë—Ä–µ–∂–∏–º–µ
 */
export async function productPromptTextHandler(ctx: MyContext) {
    const action = ctx.session.action
    if (!action) return
    const text = ctx.message?.text?.trim()
    if (!text) return
    const lang = ctx.from?.language_code ?? 'ru'
    const telegramId = ctx.from!.id

    let user = await findUser(telegramId)
    if (!user) {
        user = await createUser(ctx)
        if (!user) {
            return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start')
        }
    }

    // –ü–æ–ø—ã—Ç–∫–∞ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    const exact = await findExactTranslations(lang, text)
    if (exact.length === 1) {
        const { productId, name, emoji } = exact[0]
        if (action === 'add') {
            const res = await addProductToUser(telegramId, productId)
            if (res.success) {
                await ctx.reply(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω ${emoji ?? ''} ${name}`)
            } else if (res.reason === 'already_exists') {
                await ctx.reply('‚ÑπÔ∏è –≠—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç —É–∂–µ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ')
            } else {
                await ctx.reply('‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ')
            }
        } else {
            const res = await removeProductFromUser(telegramId, productId)
            if (res.success) {
                await ctx.reply(`üóëÔ∏è –£–¥–∞–ª—ë–Ω ${emoji ?? ''} ${name}`)
            } else if (res.reason === 'not_in_list') {
                await ctx.reply('‚ÑπÔ∏è –≠—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ')
            } else {
                await ctx.reply('‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ')
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ /products
        if (ctx.session.lastProductsMessage) {
            await renderProductsAndKeyboard(ctx)
        }

        delete ctx.session.action
        delete ctx.session.lastResults
        delete ctx.session.page
        return
    }

    // –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö
    let similar = await searchTranslations(lang, text)
    const userIds = await getUserProductIds(telegramId)

    if (action === 'add') {
        similar = similar.filter((t) => !userIds.includes(t.productId))
        if (!similar.length) {
            return ctx.reply('‚úÖ –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.')
        }
    } else {
        similar = similar.filter((t) => userIds.includes(t.productId))
        if (!similar.length) {
            return ctx.reply('‚ùå –ù–µ—Ç –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.')
        }
    }

    ctx.session.lastResults = similar
    ctx.session.page = 0
    return sendPage(ctx)
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 */
export async function productPromptPageHandler(ctx: MyContext) {
    const data = ctx.callbackQuery?.data
    if (!data) return
    const [, action, pageStr] = data.split('_')
    ctx.session.action = action as 'add' | 'remove'
    ctx.session.page = parseInt(pageStr, 10)
    await ctx.answerCallbackQuery()
    return sendPage(ctx)
}

/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ add_<id> / remove_<id>
 */
export async function productPromptFinalHandler(ctx: MyContext) {
    const data = ctx.callbackQuery?.data
    if (!data) return
    const m = data.match(/^(add|remove)_(.+)$/)
    if (!m) return
    const action = m[1] as 'add' | 'remove'
    const productId = m[2]
    const lang = ctx.from?.language_code ?? 'ru'
    const telegramId = ctx.from!.id

    const tr = await getTranslationById(productId, lang)
    if (!tr) {
        await ctx.answerCallbackQuery({ text: '‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.' })
        return
    }

    if (action === 'add') {
        const res = await addProductToUser(telegramId, productId)
        if (res.success) {
            await ctx.answerCallbackQuery({ text: `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω ${tr.emoji ?? ''} ${tr.name}` })
        } else if (res.reason === 'already_exists') {
            await ctx.answerCallbackQuery({ text: '‚ÑπÔ∏è –£–∂–µ –≤ —Å–ø–∏—Å–∫–µ.' })
        } else {
            await ctx.answerCallbackQuery({ text: '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ.' })
        }
    } else {
        const res = await removeProductFromUser(telegramId, productId)
        if (res.success) {
            await ctx.answerCallbackQuery({ text: `üóëÔ∏è –£–¥–∞–ª—ë–Ω ${tr.emoji ?? ''} ${tr.name}` })
        } else if (res.reason === 'not_in_list') {
            await ctx.answerCallbackQuery({ text: '‚ÑπÔ∏è –ù–µ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.' })
        } else {
            await ctx.answerCallbackQuery({ text: '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ.' })
        }
    }

    // –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    removeFromLastResults(ctx, productId)
    // –û–±–Ω–æ–≤–ª—è–µ–º inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Ö–æ–∂–∏—Ö
    await updateSimilarKeyboard(ctx)

    // –û–±–Ω–æ–≤–ª—è–µ–º /products
    if (ctx.session.lastProductsMessage) {
        await renderProductsAndKeyboard(ctx)
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç productId –∏–∑ session.lastResults –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É
 */
function removeFromLastResults(ctx: MyContext, productId: string) {
    if (!ctx.session.lastResults) return
    ctx.session.lastResults = ctx.session.lastResults.filter(
        (t) => t.productId !== productId
    )
    const total = ctx.session.lastResults.length
    const maxPage = Math.floor((total - 1) / PRODUCT_PAGE_SIZE)
    if ((ctx.session.page ?? 0) > maxPage) {
        ctx.session.page = maxPage
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ –º–µ—Å—Ç–µ
 */
async function updateSimilarKeyboard(ctx: MyContext) {
    const results = ctx.session.lastResults ?? []
    const page = ctx.session.page ?? 0
    const start = page * PRODUCT_PAGE_SIZE
    const slice = results.slice(start, start + PRODUCT_PAGE_SIZE)

    // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    if (results.length === 0) {
        try {
            await ctx.editMessageText(
                '‚úÖ –í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.',
                { reply_markup: undefined }
            )
        } catch (err: any) {
            if (
                !(err instanceof GrammyError &&
                    err.error_code === 400 &&
                    err.description?.includes('message is not modified'))
            ) {
                throw err
            }
        }
        return
    }

    const kb = new InlineKeyboard()
    slice.forEach((item) => {
        const label = `${item.emoji ?? ''} ${item.name}`
        kb.text(
            ctx.session.action === 'add' ? `‚ûï ${label}` : `‚ûñ ${label}`,
            `${ctx.session.action}_${item.productId}`
        ).row()
    })

    if (page > 0) {
        kb.text('‚óÄÔ∏è –ù–∞–∑–∞–¥', `page_${ctx.session.action}_${page - 1}`)
    }
    if (start + PRODUCT_PAGE_SIZE < results.length) {
        kb.text('–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è', `page_${ctx.session.action}_${page + 1}`)
    }

    try {
        await ctx.editMessageReplyMarkup({ reply_markup: kb })
    } catch (err: any) {
        if (
            !(err instanceof GrammyError &&
                err.error_code === 400 &&
                err.description?.includes('message is not modified'))
        ) {
            throw err
        }
    }
}

/**
 * –†–µ–Ω–¥–µ—Ä –∏ –ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ø–∏—Å–∫–∞ /products
 */
async function renderProductsAndKeyboard(ctx: MyContext) {
    const { chat, message_id } = ctx.session.lastProductsMessage!
    const telegramId = ctx.from!.id
    const lang = ctx.from?.language_code || 'ru'

    const products = await getUserProducts(telegramId, lang)
    // –ï—Å–ª–∏ –ø—É—Å—Ç
    if (products.length === 0) {
        const kbEmpty = new InlineKeyboard().text('‚ûï –î–æ–±–∞–≤–∏—Ç—å', 'prompt_add')
        try {
            await ctx.api.editMessageText(
                chat,
                message_id,
                '‚ö†Ô∏è –í—ã —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ "‚ûï –î–æ–±–∞–≤–∏—Ç—å".',
                { reply_markup: kbEmpty }
            )
        } catch (err: any) {
            if (
                !(err instanceof GrammyError &&
                    err.error_code === 400 &&
                    err.description?.includes('message is not modified'))
            ) {
                throw err
            }
        }
        return
    }

    const list = products
        .map((e, i) => `${i + 1}. ${e.emoji} ${e.name}`)
        .join('\n')

    const kb = new InlineKeyboard()
        .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å', 'prompt_add')
        .text('‚ûñ –£–±—Ä–∞—Ç—å',   'prompt_remove')

    try {
        await ctx.api.editMessageText(
            chat,
            message_id,
            `*–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:*\n\n${list}`,
            { parse_mode: 'Markdown', reply_markup: kb }
        )
    } catch (err: any) {
        if (
            !(err instanceof GrammyError &&
                err.error_code === 400 &&
                err.description?.includes('message is not modified'))
        ) {
            throw err
        }
    }
}

/**
 * –í—ã–≤–æ–¥ –ø–æ—Ä—Ü–∏–∏ –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 */
async function sendPage(ctx: MyContext) {
    const results = ctx.session.lastResults ?? []
    const page = ctx.session.page ?? 0
    const action = ctx.session.action!
    const start = page * PRODUCT_PAGE_SIZE
    const slice = results.slice(start, start + PRODUCT_PAGE_SIZE)

    const kb = new InlineKeyboard()
    slice.forEach((item) => {
        const label = `${item.emoji ?? ''} ${item.name}`
        kb.text(
            action === 'add' ? `‚ûï ${label}` : `‚ûñ ${label}`,
            `${action}_${item.productId}`
        ).row()
    })

    if (page > 0) {
        kb.text('‚óÄÔ∏è –ù–∞–∑–∞–¥', `page_${action}_${page - 1}`)
    }
    if (start + PRODUCT_PAGE_SIZE < results.length) {
        kb.text('–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è', `page_${action}_${page + 1}`)
    }

    await ctx.reply(
        `–ü–æ—Ö–æ–∂–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã (—Å—Ç—Ä. ${page + 1}/${Math.ceil(results.length / PRODUCT_PAGE_SIZE)}):`,
        { reply_markup: kb }
    )
}
