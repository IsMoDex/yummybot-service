import { Context } from 'grammy';
import {
    recognizedCache,
    CACHE_TTL,
} from '../cache/recognizedCache';
import {
    addProductToUser,
    clearUserProducts,
} from '../database/queries/product';

async function getCacheList(ctx: Context): Promise<string[]|null> {
    const msg = ctx.callbackQuery?.message;
    if (!msg) return null;
    const entry = recognizedCache.get(msg.message_id);
    if (!entry) return null;
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º TTL
    if (Date.now() - entry.ts > CACHE_TTL) {
        recognizedCache.delete(msg.message_id);
        return null;
    }
    // —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è
    recognizedCache.delete(msg.message_id);
    return entry.list;
}

export async function applyAddAction(ctx: Context) {
    const list = await getCacheList(ctx);
    if (!list) {
        return ctx.answerCallbackQuery({
            text: '‚ö† –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /upload.',
            show_alert: true,
        });
    }
    const userId = ctx.from!.id;
    let added = 0;
    for (const id of list) {
        const res = await addProductToUser(userId, id);
        if (res.success) added++;
    }
    await ctx.editMessageReplyMarkup(); // —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    return ctx.reply(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${added}`);
}

export async function applyReplaceAction(ctx: Context) {
    const list = await getCacheList(ctx);
    if (!list) {
        return ctx.answerCallbackQuery({
            text: '‚ö† –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /upload.',
            show_alert: true,
        });
    }
    const userId = ctx.from!.id;
    // –æ—á–∏—â–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º
    await clearUserProducts(userId);
    let added = 0;
    for (const id of list) {
        const res = await addProductToUser(userId, id);
        if (res.success) added++;
    }
    await ctx.editMessageReplyMarkup();
    return ctx.reply(`üîÑ –°–ø–∏—Å–æ–∫ –∑–∞–º–µ–Ω—ë–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${added}`);
}
