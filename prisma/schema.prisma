generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  telegramId       BigInt            @unique
  username         String?
  firstName        String?
  languageCode     String?
  createdAt        DateTime          @default(now())
  userProducts     UserProduct[]     // Продукты пользователя
  favoriteProducts FavoriteProduct[] // Любимые продукты пользователя
  favoriteRecipes  FavoriteRecipe[]  // Избранные рецепты
  uploads          ImageUpload[]     // История загрузок
}

model Product {
  id           String                @id
  translations ProductTranslation[]   // Локализации названия и эмодзи
  userEntries  UserProduct[]
  inRecipes    RecipeProduct[]
  favByUsers   FavoriteProduct[]
}

model ProductTranslation {
  id         Int      @id @default(autoincrement())
  productId  String
  language   String   // 'ru', 'en', 'fr' и т.д.
  name       String
  emoji      String?

  product    Product  @relation(fields: [productId], references: [id])

  @@unique([productId, language])
}

model UserProduct {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId], name: "userId_productId")
}

model FavoriteProduct {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId String
  addedAt   DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

//
// Здесь начальные изменения: удаляем title/description/steps из Recipe,
// и добавляем таблицу переводов для RecipeTranslation
//

model Recipe {
  id               Int                  @id @default(autoincrement())
  createdAt        DateTime             @default(now())
  translations     RecipeTranslation[]  // Локализации заголовка, описания и шагов
  ingredients      RecipeProduct[]
  favoriteByUsers  FavoriteRecipe[]
}

model RecipeTranslation {
  id          Int      @id @default(autoincrement())
  recipeId    Int
  language    String
  title       String
  description String?
  steps       String?

  recipe      Recipe   @relation(fields: [recipeId], references: [id])

  @@unique([recipeId, language])
}

model RecipeProduct {
  id        Int     @id @default(autoincrement())
  recipeId  Int
  productId String

  recipe    Recipe  @relation(fields: [recipeId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model FavoriteRecipe {
  id        Int      @id @default(autoincrement())
  userId    Int
  recipeId  Int
  addedAt   DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  recipe    Recipe   @relation(fields: [recipeId], references: [id])

  @@unique([userId, recipeId])
}

model ImageUpload {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  userId    Int
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}
